
Renderpasses


Hi again, Welcome to my vulkan API tutorial series.

In this tutorial we'll learn about render passes.

In short, render passes define the attachments, sub passes and how we are going to use the
different attachments with different sub passes, as well as working as an optimization layer.
Render pass can also do some image transitions automatically which will save us from writing our own memory barriers later.

AMD's Mantle didn't have render passes originally and this feature for Vulkan was requested by
Android developers as most handheld devices would benefit from render passes a lot.

Renderpass is divided into sub passes. You could consider one render pass
as one full render where you draw the entire scene to the screen and if you use deferred rendering
you would divide the render pass into two sub passes where the first sub pass renders the
G-buffers and the second sub pass combines them together to make the final render.

You are forced to use render pass when you render but you're still free to do all of the
image transitions and render barriers manually if you prefer so, though
there is rarely any need to do this as render pass should do most of the work for you.

Render pass presents an opportunity for the the implementation to optimize your data storage
and data transfers. Handheld devices should get the most out of this but desktop GPU manufacturers are likely
to use this render pass information to optimize rendering on desktop and laptop side as well,
if not now, at least some time in the future.
